/* Generated By:JavaCC: Do not edit this line. GologParser.java */
package incr.golog.syntax.parser;

import java.io.*;
import java.util.*;

import incr.*;
import incr.formula.*;
import incr.golog.*;
import incr.golog.syntax.*;
import incr.term.*;

@SuppressWarnings("unused")
public class GologParser implements GologParserConstants {
        public Environment environment = new Environment();
        public AbstractProgram program = null;

        public GologParser(String s) {
                this(new StringReader(s));
        }

  final public void parse() throws ParseException {
        Proc proc;
        Action action;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
      case ACTION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        proc = proc();
                       environment.add(proc);
        break;
      case ACTION:
        action = action();
                           environment.add(action);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR_OP:
    case IF:
    case WHILE:
    case PI:
    case QUESTIONMARK:
    case ID:
      program = program();

      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public Action action() throws ParseException {
        Functional head;
        Functional precond = Term.TRUE;
        List<Term> effects = Collections.emptyList();
    jj_consume_token(ACTION);
    head = functionalOrAtom();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRECONDITIONS:
      jj_consume_token(PRECONDITIONS);
      precond = boolExpr();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EFFECTS:
      jj_consume_token(EFFECTS);
      effects = termList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
         {if (true) return new Action(head, precond, effects);}
    throw new Error("Missing return statement in function");
  }

  final public Proc proc() throws ParseException {
        Functional head;
        AbstractProgram body;
    jj_consume_token(PROC);
    head = functionalOrAtom();
    body = program();
    jj_consume_token(ENDPROC);
         {if (true) return new Proc(head, body);}
    throw new Error("Missing return statement in function");
  }

  final public AbstractProgram program() throws ParseException {
        AbstractProgram p, p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      p = atomicBlock();
      break;
    case IF:
      p = ifBlock();
      break;
    case PI:
      p = piBlock();
      break;
    case QUESTIONMARK:
      p = testBlock();
      break;
    case WHILE:
      p = whileBlock();
      break;
    case PAR_OP:
      p = grouping();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case PIPE:
      case STAR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        jj_consume_token(PIPE);
        p2 = program();
                               p = new NDet(p, p2);
        break;
      case COLON:
        jj_consume_token(COLON);
        p2 = program();
                                p = new Sequence(p, p2);
        break;
      case STAR:
        jj_consume_token(STAR);
                  p = new Star(p);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractProgram grouping() throws ParseException {
        AbstractProgram p;
    jj_consume_token(PAR_OP);
    p = program();
    jj_consume_token(PAR_CL);
                                       {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Atomic atomicBlock() throws ParseException {
        Functional f;
    f = functionalOrAtom();
                              {if (true) return new Atomic(f);}
    throw new Error("Missing return statement in function");
  }

  final public If ifBlock() throws ParseException {
        Functional cond;
        AbstractProgram thenBlock, elseBlock;
    jj_consume_token(IF);
    cond = boolExpr();
    jj_consume_token(THEN);
    thenBlock = program();
    jj_consume_token(ELSE);
    elseBlock = program();
    jj_consume_token(ENDIF);
         {if (true) return new If(cond, thenBlock, elseBlock);}
    throw new Error("Missing return statement in function");
  }

  final public Pi piBlock() throws ParseException {
        Variable var;
        AbstractProgram body;
    jj_consume_token(PI);
    var = var();
    jj_consume_token(DOT);
    body = program();
         {if (true) return new Pi(var, body);}
    throw new Error("Missing return statement in function");
  }

  final public Test testBlock() throws ParseException {
        Functional cond;
    jj_consume_token(QUESTIONMARK);
    cond = boolExpr();
         {if (true) return new Test(cond);}
    throw new Error("Missing return statement in function");
  }

  final public While whileBlock() throws ParseException {
        Functional cond;
        AbstractProgram body;
    jj_consume_token(WHILE);
    cond = boolExpr();
    jj_consume_token(DO);
    body = program();
    jj_consume_token(ENDWHILE);
         {if (true) return new While(cond, body);}
    throw new Error("Missing return statement in function");
  }

  final public Functional functionalOrAtom() throws ParseException {
        Functional f;
    if (jj_2_1(2)) {
      f = functional();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        f = atom();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Functional functional() throws ParseException {
        Token f;
        List<Term> args = new ArrayList<Term>();
        Term arg0;
    f = jj_consume_token(ID);
    jj_consume_token(PAR_OP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NUMINT:
    case NUMFLOAT:
    case VAR:
      args = termList();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(PAR_CL);
         {if (true) return new Functional(f.image, args);}
    throw new Error("Missing return statement in function");
  }

  final public Functional atom() throws ParseException {
        Token a;
    a = jj_consume_token(ID);
                {if (true) return new Functional(a.image);}
    throw new Error("Missing return statement in function");
  }

  final public Functional num() throws ParseException {
        Token f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMINT:
      f = jj_consume_token(NUMINT);
      break;
    case NUMFLOAT:
      f = jj_consume_token(NUMFLOAT);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                       {if (true) return new Functional(f.image);}
    throw new Error("Missing return statement in function");
  }

  final public Variable var() throws ParseException {
        Token f;
    f = jj_consume_token(VAR);
                 {if (true) return new Variable(f.image);}
    throw new Error("Missing return statement in function");
  }

  final public Term functionalOrNumOrVar() throws ParseException {
        Term t;
    if (jj_2_2(2)) {
      t = functional();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = atom();
        break;
      case NUMINT:
      case NUMFLOAT:
        t = num();
        break;
      case VAR:
        t = var();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public List<Term> termList() throws ParseException {
        List<Term> args = new ArrayList<Term>();
        Term t;
        Token n;
    t = functionalOrNumOrVar();
                                  args.add(t);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      t = functionalOrNumOrVar();
                                            args.add(t);
    }
         {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public Functional boolExpr() throws ParseException {
        Functional t;
    t = boolExprDisj();
                          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Functional boolExprDisj() throws ParseException {
        Functional t, t2;
    t = boolExprConj();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      t2 = boolExprConj();
                                  t=new Or(t, t2);
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Functional boolExprConj() throws ParseException {
        Functional t, t2;
    t = boolExprAtom();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      t2 = boolExprAtom();
                                   t=new And(t, t2);
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Functional boolExprAtom() throws ParseException {
        Functional t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = functional();
                          {if (true) return t;}
      break;
    case NOT:
      jj_consume_token(NOT);
      t = functional();
                                {if (true) return new Not(t);}
      break;
    case PAR_OP:
      jj_consume_token(PAR_OP);
      t = boolExpr();
      jj_consume_token(PAR_CL);
                                          {if (true) return t;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PAR_OP)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GologParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8040000,0x8040000,0x40a08840,0x10000000,0x20000000,0x40a08840,0x7000000,0x7000000,0x40000000,0xc0000000,0x80000000,0xc0000000,0x80000,0x200,0x100,0x40000440,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x3,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GologParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GologParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GologParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GologParser(GologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
